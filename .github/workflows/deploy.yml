name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  PROJECT_ID: valorizeai
  REGION: southamerica-east1
  SERVICE_NAME: valorizeai
  JOB_NAME: valorizeai-artisan

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          gcloud builds submit \
            --config cloudbuild.yaml \
            --project ${{ env.PROJECT_ID }} \
            --region ${{ env.REGION }} \
            .

      - name: Update Cloud Run Service
        run: |
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/valorize-repo/valorizeai:latest \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}

      - name: Update Cloud Run Job
        run: |
          gcloud run jobs update ${{ env.JOB_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/valorize-repo/valorizeai:latest \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}

      - name: Run Database Migrations
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud run jobs execute ${{ env.JOB_NAME }} \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --args="migrate,--force"

      - name: Verify Deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --format="value(status.url)")

          echo "Service deployed at: $SERVICE_URL"

          # Wait for service to be ready
          sleep 30

          # Health check
          if curl -f "$SERVICE_URL/up" > /dev/null 2>&1; then
            echo "✅ Service is healthy"
          else
            echo "❌ Service health check failed"
            exit 1
          fi
